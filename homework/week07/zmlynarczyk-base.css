* {font-family: sans-serif}
nav ul{
  list-style-type: none;}
.page-container {width: 1024px; margin: 0 auto; padding: 0;}
#logo {width: 150px; height: 150px; float: left; text-align: center;}
#search {width: 20em; height: 4em; float: right;}
#search input {width: 17em; height: 3em; float: left;}
#search-btn {width: 3em; height: 3em; background-color: #ccc; float: right; padding: 0 1em; text-align: center;}
#search-btn i {padding: 30% 0;}
#top-panel {margin: 1em 1.5em 1em 1em;}
#top-banner {background:url(images/W7-lab-banner-background.png) no-repeat;height:320px;}
#banner-heading {background-color: #fff; margin-left:2em; margin-top: 4em; width: 30%; padding: 0.5em; display: inline-block;}
#banner-list {padding: 1em;}
#page-center {margin: 0 2em 0 0;}
#bottom-row {margin: 1em 0; border-bottom:3px solid #666;}
#social {padding-left: 1em;}
.grid-row {padding: 1em 0 1em 1em;}
#extra-img {float: left; padding: 2em 1em;}
#extra-img img {float: left;}
#extra-img p {display: inline-block; margin-left: 1em;}
li.spaced-list {padding-bottom: 1.5em;}
header {height: 8em; margin: 1em 0; padding: 0;}
nav {height: 26px; margin: 1em 0; padding: 10px 0 20px 10px; background-color: #ccc; font-size: 32px;}
.padded {background-color: #ccc; padding: 1em; margin: 0;}
#center-right {padding: 1em 0 0 1em; margin: 0;}
#carousel .col {margin: 1em 0 1em 1em;}
/* 
Review the rest of this CSS file and add comments. The goal of the review is to give you an idea of how this file can be
reused for future class and individual project work.

The comments should detail
- What does the class do?
- What will be a good use case of this class?

.container {
  margin: 0 auto;
  width: 1200px;
}
- This class stylizes containers to horizotally center and set the width to 1200px. The auto margin command splits the remaing space between left and right margins.
- This container would be good for organizing multiple elements along side each other.

.row {
  display: flex;
  flex-flow: row wrap;
}
- The flex value specifies a flexbox layout for any element in the class "row" and "flex-flow: row wrap" sets both the direction of the content (rows) and flex-wrap property that allows the content to wrap under itself in another row.
- This styling would be good to use when organizing many similar images or pieces of content in a uniform way.

.col {
  display: flex;
}
- Again, this display property specifies that any element in the "col" class will create a flexible container.
- Useful for containing and organizing related information.

.col-1 {
  flex: 1;
}
- This class specifies that any element linked to "col-1" will take the space of one column within the flex box.
- This is good for placing a smaller item or smaller information that doesn't need as much space, or perhaps is additional information to whatever else is in the flexbox. 

.col-2 {
  flex: 2;
}
- "col-2" on the other hand, will take up the space of 2 columns within the flexbox, or 2 times as much space as the other, col-1, item.
- This would be a better choice for larger images or amounts of content.

.col-3 {
  flex: 3;
}
- "col-3" would be used to classify any items or content that would take up 3 times the space as "flex: 1;" items.
- This would be best for largest images/information.

.responsive {
  width: 100%;
  height: auto;
}
- "width: 100%;" specifies that an element take up the full space of its containing block, in addition to any horizontal margin, padding and border.
- This would be good to use perhaps in a flexbox to specify the filling up of the entire line, but I think a better option would be "width: auto;".

.text-center {
  text-align: center;
}
- This value centers all text, giving both sides ragged edges.
- This would be good use perhaps in smaller amounts of text, or short summaries under titles.

.text-right {
  text-align: right;
}
- This text-align value on the other hand, aligns text to the right, so that all of the lines of text on the right line up, leaving the left side ragged.
- This would be good use when the text in the "text-right" class was to be placed along the right margin, so that it could be placed nicely against the straight edge.

.card {
  border: 1px solid #ccc;
}
- An element in the "card" class would have a thin, solid border of light gray.
- This would be a good class to use to slightly offset text or content from the rest of the page, although it would probably need some padding to give the content space depending on what it is.

.rounded-border {
  border-radius: 5px;
}
- This class would slightly round the corners of a border. They would still be rectangular but not as sharp.
- A border-radius might come in handy if trying to make content look more playful, or not as rigid as straight lines are.

.m-1 {
  margin: 10px;
}
- "m-1" sets the margin on all sides of a piece of content to 10px.
- This would be used for a uniform setting of content.

.mt-1 {
  margin-top: 10px;
}
- This class, on the other hand, would only add 10px of margin to the top of a piece of content.
- This would come into play if trying to increase space between this element and an element above it.

.ml-1 {
  margin-left: 10px;
}
- This class adds 10px of margin to only the left side of a piece of content.
- This would be helpful in offsetting content, or creating an indent to differentiate it from other content.

.mr-1 {
  margin-right: 10px;
}
- "mr-1" would add 10px of margin to only the right side of a piece of content.
- This could help in increasing space between this element and a neighboring element.

.mb-1 {
  margin-bottom: 10px;
}
- This class would add 10px of margin to only the bottom of a piece of content.
- This would be helpful in further separating this element from one underneath it.

.p-1 {
  padding: 10px;
}
- This sets the padding for all four sides of content to 10 px. According to the box model, padding is closer to the actual content than margin is. Padding increases the space between the content and a border, whereas margin increases space between the border and the edges of a page. Padding focuses more on the space within a container and the element inside, whereas margin focuses on space relative to other elements/content.
- Thus, 10px of padding around an element would secure the space around it. With no border though, it would merely look like an increase in margin size.

.pt-1 {
  padding-top: 10px;
}
- This would add 10px of padding to only the top of a piece of content.
- This would be helpful in increasing only the top space of an element, especially if it were within a border.

.pl-1 {
  padding-left: 10px;
}
- This would add 10px of padding to only the left of a piece of content.
- This would be helpful in further increasing the look of the indent of content.

.pr-1 {
  padding-right: 10px;
}
- This would add 10px of padding to only the right of a piece of content.
- This would be helpful in adding more space to the right of an element.

.pb-1 {
  padding-bottom: 10px;
}
- This would add 10px of padding to only the bottom of a piece of content.
- This would be helpful in increasing space below an element.

#/